---
import { Image } from "astro:assets";
import { fromBase } from "@/lib/fromBase";
import { markdownify, slugify } from "@/lib/utils/textConverter";
import type { CollectionEntry } from "astro:content";
import ConditionalATag from "@/components/ConditionalATag.astro";
import type { PostType } from "@/content.config";
import Tile from "@/components/Tile.astro";
import Video from "@/components/Video.astro";

type Props = {
  post: CollectionEntry<"posts">;
  displayReadMore?: boolean;
  styling: string;
  headerStyling?: string;
  topBorderStyling?: string;
  heroTextStyling?: string;
};

const {
  post,
  displayReadMore = undefined,
  styling,
  topBorderStyling = "border-t-2 border-red",
  headerStyling = "",
  heroTextStyling = ""
} = Astro.props;

const showReadMore = (() => {
  if (displayReadMore !== undefined) {
    return displayReadMore;
  } else {
    return (post.data?.posts || []).length > 0;
  }
})();
const [width, height] = (post.data?.imageDimensions || "").split("x");
if (post.data?.imageDimensions) {
  post.data.parsedImageWidth = parseInt(width);
  post.data.parsedImageHeight = parseInt(height);
}
const [videoWidth, videoHeight] = (post.data?.videoDimensions || "").split("x");
if (post.data?.videoDimensions) {
  post.data.parsedVideoWidth = parseInt(videoWidth);
  post.data.parsedVideoHeight = parseInt(videoHeight);
}
const hasVideo = (post.data?.video !== undefined);
const hasMultimedia = (hasVideo || post.data.image);
const multimediaInfo = (() => {
  const placement = (post.data?.imagePlacement || post.data?.videoPlacement);
  const placementNotSet = placement == undefined;
  if (hasMultimedia) {
    if (placementNotSet) {
      return { size: undefined, placement: 'header' };
    } else {
      const matches = /^(sm|md|lg|xl|2xl|3xl|4xl|5xl)?:?(.+)$/.exec(placement)
      return { size: matches[1], placement: matches[2] };
    }
  } else {
    return { size: undefined, placement: 'header' };
  }
})();
const multimediaPlacement = multimediaInfo.placement == 'body' ? 'body' : undefined;
const hasHeaderMultimedia = (post.data?.imagePlacement || post.data?.videoPlacement) && multimediaInfo.placement == 'header';
const topBorderWithHeaderMedia = hasHeaderMultimedia ? '' : topBorderStyling;
let tileWithHeaderMedia = (() => {
  if (width == height && !multimediaPlacement) {
    return 'tile-with-square-header-media';
  } else if (hasHeaderMultimedia) {
    return 'tile-with-header-media';
  } else {
    return 'tile-with-body-media';
  }
})();
const hasTextBody = (post.body || "") != "";
const tileBodyClass = (() => {
  if (hasHeaderMultimedia) {
    return 'tile-body-without-body-media'
  } else if (hasMultimedia && multimediaInfo.placement == 'body') {
    if (!hasTextBody) {
      return 'tile-body-with-only-body-media';
    } else {
      return 'tile-body-with-body-media';
    }
  } else {
    return '';
  }
})();

const showHeaderImageClass = (() => {
  if (multimediaInfo.size && multimediaInfo.placement == 'body') {
    return `${multimediaInfo.size}:hidden block`;
  } else {
    return '';
  }
})();

const showBodyImageClass = (() => {
  if (multimediaInfo.size && multimediaInfo.placement == 'body') {
    return `hidden ${multimediaInfo.size}:block`;
  } else {
    return '';
  }
})();

---
<Tile id={slugify(post.data.title)} styling={`${styling} ${tileWithHeaderMedia} ${topBorderWithHeaderMedia}` } headerStyling={headerStyling} bodyStyling={`${heroTextStyling} ${tileBodyClass}`}>
  <Fragment slot="header">
  {
    post.data.image && !multimediaPlacement && (
      <ConditionalATag conditional={post.data.imageLink} href={post.data.imageLink}>
          <Image
            src={fromBase(post.data.image)}
            alt={post.data.title}
            width={post.data.parsedImageWidth}
            height={post.data.parsedImageHeight}
            class=`w-auto tile-image ${showHeaderImageClass}`
            format="webp"
          />
      </ConditionalATag>
    )
  }
  {
    hasVideo && !multimediaPlacement && (
      <Video url={post.data.video} width={post.data.parsedVideoWidth} height={post.data.parsedVideoHeight} title={post.data.title}  oreientation={post.data.videoOrientation} />
    )
  }
  </Fragment>

  <Fragment slot="title">
    {
      post.data.title && (
        <h3 class={`${headerStyling} text-gold w-full text-center pt-2`}>
          {post.data.title}
        </h3>
      )
    }
  </Fragment>

  <Fragment slot="body">
    {
      hasVideo && multimediaPlacement == 'body' && (
        <Video url={post.data.video} width={post.data.parsedVideoWidth} height={post.data.parsedVideoHeight} title={post.data.title}  oreientation={post.data.videoOrientation} />
      )
    }
    {
      post.data.image && multimediaInfo.placement == 'body' && (
        <ConditionalATag conditional={post.data.imageLink} href={post.data.imageLink}>
          <Image
            src={fromBase(post.data.image)}
            alt={post.data.title}
            width={post.data.parsedImageWidth}
            height={post.data.parsedImageHeight}
            class=`w-auto tile-image ${showBodyImageClass}`
            format="webp"
          />
        </ConditionalATag>
      )
    }
    <span data-testid="tile-body-text" class={`flex flex-col items-center p-4 max-w-[100%] ${hasTextBody ? "" : "hidden"}`}>
    {
      hasTextBody && (
      <div class={`${heroTextStyling} tile-body-hero-text text-lg p-2 a-tag-underline text-center wrap-break-word`}><Fragment set:html={markdownify(post.body)} /></div>
      )
    }
    {
      (showReadMore && (
      <a class="bg-primary text-white rounded-full px-5 my-2 max-w-[8rem] max-h-[2rem] align-center justify-self-center" href={fromBase(`/${post.id}`)}>Read More</a>
      ))
    }
    </span>
  </Fragment>
</Tile>
<style>
@import "@/styles/tailwind.css";
.tile-with-square-header-media {
  @apply grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr auto;
  height: auto;
  @variant sm {
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr;
    height: auto;
  }
}
.tile-with-header-media {
  @apply grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr auto;
  height: auto;
}
.tile-with-header-media > .tile-image-container {
  align-self: stretch;
}
.tile-body-hero-text {
  max-width: 100%;
  white-space-collapse: preserve-breaks;
}
.tile-body-hero-text > p{
  white-space-collapse: preserve-breaks;
  white-space: pre-line;
}
.tile-body-with-body-media {
  @apply grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr auto;
  align-items: stretch;
  width: 100%;
  @variant sm {
    grid-template-columns: 1fr;
    height: auto;
  }
  @variant lg {
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr;
  }
}
</style>
