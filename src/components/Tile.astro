---

type Props = {
  id: string;
  styling: string;
  topBorderStyling?: string;
  headerStyling?: string;
  contentStyling?: string;
  bodyStyling?: string;
};

const {
  id,
  styling = "",
  topBorderStyling = "border-t-2 border-red",
  headerStyling = "",
  bodyStyling = "",
  ...rest
} = Astro.props;

const dataAttr = Object.keys(rest).filter(key => key.startsWith("data-astro"))[0];

const hideIfNoHeaderSlot = Astro.slots.has("header") ? "" : "hidden"

const showTopBorderStyling = Astro.slots.has("header") ? "" : topBorderStyling;

---

<div class={`${styling} ${showTopBorderStyling} tile items-center lg:flex-row justify-evenly`} id={id} {...{ [dataAttr]: rest[dataAttr] }}>
  <div data-testid="tile-header-image-container" class={`${headerStyling} tile-image-container w-auto sm:w-full ${hideIfNoHeaderSlot}`}>
    <slot name="header" />
  </div>
  <div data-testid="tile-content" class="tile-content flex flex-col items-center w-full text-center" {...{ [dataAttr]: rest[dataAttr] }}>
    <slot name="title"/>
    <hr data-testid="divider" class="border-inset border-b-1 border-divider w-full" />
    <div data-testid="tile-body" class={`${bodyStyling} tile-body max-w-[100%] align-center pt-2`} {...{ [dataAttr]: rest[dataAttr] }}>
      <slot name="body" />
    </div>
  </div>
</div>
