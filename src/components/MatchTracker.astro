---
import Tile from "@/components/Tile.astro";

---
<Tile id="match-tracker" styling={`w-3/4 mb-6 shadow bg-white`}>
  <Fragment slot="title"><span class="p-2" updates="match-date"></span></Fragment>
  <Fragment slot="body">
    <div class="grid grid-cols-[1fr_auto_1fr] p-4">
      <div data-show-after-load class="hidden text-xl font-bold grid-cols-1 grid-rows-2 align-center">
        <img updates="home-team-image" src="" class="min-size-[100px]" />
        <div updates="home-team-name" class="text-center"></div>
      </div>
      <h1 data-spinner class="spinner text-center self-center text-[1.5rem] sm:text-[2rem] md:text-[3rem]"></h1>
      <div class="text-xl font-bold grid-cols-1 grid-rows-2 align-center">
        <img updates="away-team-image" src="" class="min-size-[100px]" />
        <div updates="away-team-name" class="text-center"></div>
      </div>
    </div>
  </Fragment>
</Tile>
<style>
.spinner {
  width: 24px;
  height: 24px;
  border: 3px solid rgba(0, 0, 0, 0.3);
  border-top-color: #3498db;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg); /* Start at 0 degrees */
  }
  100% {
    transform: rotate(360deg); /* End at 360 degrees, completing a full rotation */
  }
}
</style>
<script>
  import { startOfWeek, format, addDays } from "date-fns";
  const updateTracker = (nearestMatch) => {
    Array.from(document.querySelectorAll('[updates]')).map((el) => {
      if (el.getAttribute('updates') == 'away-team-image') {
        el.src = nearestMatch.awayTeam.crest;
      } else if (el.getAttribute('updates') == 'home-team-image') {
        el.src = nearestMatch.homeTeam.crest;
      } else if (el.getAttribute('updates') == 'away-team-name') {
        el.textContent = nearestMatch.awayTeam.shortName;
      } else if (el.getAttribute('updates') == 'home-team-name') {
        el.textContent = nearestMatch.homeTeam.shortName;
      } else if (el.getAttribute('updates') == 'match-date') {
        const converted = new Intl.DateTimeFormat(undefined, {
          weekday: 'long',
          month: 'long',
          day: 'numeric',
          hour: 'numeric',
          minute: 'numeric',
        }).format(new Date(nearestMatch.utcDate));

        el.textContent = converted;
      }
    });
    Array.from(document.querySelectorAll('[data-spinner]')).map((el) => {
      el.classList.remove('spinner');
      el.textContent = 'VS';
    });
    Array.from(document.querySelectorAll('[data-show-after-load]')).map((el) => {
      el.classList.remove('hidden');
    });
  };


  document.addEventListener("astro:page-load", () => {

    const today = new Date();
    const formattedToday = format(today, 'yyyy-MM-dd');
    const midWeek = format(startOfWeek(today, { weekStartsOn: 3 }), 'yyyy-MM-dd');

    const cache = localStorage.getItem(formattedToday);
    if (cache) {
      const nearestMatch = JSON.parse(cache);
      updateTracker(nearestMatch);
      return;
    }
    fetch(`/api/fixtures/${midWeek}.json`).then(async (response) => {
      const json = await response.json();
      let nearestMatch: Date| undefined = undefined;
      const sortedMatches = json.matches.sort((a, b) => a.utcDate.localeCompare(b.utcDate));
      const laterThanNow = sortedMatches.filter((match) => {
        return new Date(match.utcDate).getTime() > today.getTime();
      });
      nearestMatch = laterThanNow[0];
      if (!nearestMatch) {
        const nextMidWeek = format(startOfWeek(addDays(today, 7), { weekStartsOn: 4 }), 'yyyy-MM-dd');
        await fetch(`/api/fixtures/${nextMidWeek}.json`).then(async (nextWeekResponse) => {
          const nextWeekJson = await nextWeekResponse.json();
          nearestMatch = nextWeekJson.matches[0];
        });
      }
      localStorage.setItem(formattedToday, JSON.stringify(nearestMatch));
      updateTracker(nearestMatch);
    });
  });
</script>
