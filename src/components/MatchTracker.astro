---
import Tile from "@/components/Tile.astro";

---
<audio id="audio-player" src="https://www.fanchants.com/media/chants/full/download/manchester-is-full-of-shite-fanchants-free.mp3" preload="auto"></audio>
<Tile id="match-tracker" styling={`w-3/4 mb-6 shadow bg-white`}>
  <Fragment slot="title"><h1 updates="double-header" class="hidden p-2 text-red">DOUBLE HEADER</h1><h4 data-show-after-load updates="match-date" class="hidden p-2"></h4></Fragment>
  <Fragment slot="body">
    <div class="grid grid-cols-[1fr_auto_1fr] p-4">
      <div data-show-after-load class="hidden text-xl font-bold grid-cols-1 grid-rows-2 align-center">
        <img updates="home-team-image" src="" class="w-[100%] min-w-[100px] min-h-[100px] lg:min-w-[100px] lg:min-h-[200px]" />
        <div updates="home-team-name" class="text-center"></div>
      </div>
      <h1 data-spinner class="spinner text-center self-center text-[1.5rem] sm:text-[2rem] md:text-[3rem]"></h1>
      <div data-show-after-load class="hidden text-xl font-bold grid-cols-1 grid-rows-2 align-center">
        <img updates="away-team-image" src="" class="w-[100%] min-w-[100px] min-h-[100px] lg:min-w-[100px] lg:min-h-[200px]"/>
        <div updates="away-team-name" class="text-center"></div>
      </div>
    </div>
  </Fragment>
</Tile>
<Tile id="match-tracker-double-header" styling={`hidden w-3/4 mb-6 shadow bg-white`}>
  <Fragment slot="title"><h4 data-show-after-load updates="match-date" class="hidden p-2"></h4></Fragment>
  <Fragment slot="body">
    <div class="grid grid-cols-[1fr_auto_1fr] p-4">
      <div data-show-after-load class="hidden text-xl font-bold grid-cols-1 grid-rows-2 align-center">
        <img updates="home-team-image" src="" class="w-[100%] min-w-[100px] min-h-[100px] lg:min-w-[100px] lg:min-h-[200px]" />
        <div updates="home-team-name" class="text-center"></div>
      </div>
      <h1 data-spinner class="spinner text-center self-center text-[1.5rem] sm:text-[2rem] md:text-[3rem]"></h1>
      <div data-show-after-load class="hidden text-xl font-bold grid-cols-1 grid-rows-2 align-center">
        <img updates="away-team-image" src="" class="w-[100%] min-w-[100px] min-h-[100px] lg:min-w-[100px] lg:min-h-[200px]" />
        <div updates="away-team-name" class="text-center"></div>
      </div>
    </div>
  </Fragment>
</Tile>
<style>
.spinner {
  width: 24px;
  height: 24px;
  border: 3px solid rgba(0, 0, 0, 0.3);
  border-top-color: #3498db;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg); /* Start at 0 degrees */
  }
  100% {
    transform: rotate(360deg); /* End at 360 degrees, completing a full rotation */
  }
}
</style>
<script>
  import { startOfWeek, format, addDays } from "date-fns";
  import { fromZonedTime } from 'date-fns-tz';
  import { v4 as uuid } from 'uuid';
  import type { MatchType } from "@/types/match";
  const easterEggImage = "https://raw.githubusercontent.com/twitter/twemoji/8e58ae4745075d4faa5b9190eab578aa7e4c32d5/svg/1f4a9.svg";
  const CACHE_VERSION = 1;
  const DOUBLE_HEADER_FLAG = 'double-header';
  const imageLoadListerners = {
    "match-tracker": {
      home: false,
      away: false
    },
    "match-tracker-double-header": {
      home: false,
      away: false
    }
  };
  const easterEggListerners = {
    "id": uuid(),
    "match-tracker": {
      home: undefined,
      away: undefined
    },
    "match-tracker-double-header": {
      home: undefined,
      away: undefined
    }
  };
  const LOADING_STATUSES = {
    loading: 'LOADING',
    loaded: 'LOADED',
  };
  let loading_status = LOADING_STATUSES.loading;
  const getToday = () => {
    return window.today || new Date();
  };
  const preloadEasterEggImage = async () => {
    const img = new Image();
    img.src = easterEggImage;
  };
  const toggleEasterEgg = (element: HTMLElement, originalSrc: string, count: number, audioElement: HTMLAudioElement) => {
    if (count % 2 == 0) {
      element.src = easterEggImage;
      audioElement.play();
    } else {
      audioElement.pause();
      element.src = originalSrc;
    }
  };
  const removeSpinner = (element: HTMLElement) => {
    Array.from(element.querySelectorAll('[data-spinner]')).map((el) => {
      el.classList.remove('spinner');
      el.textContent = 'VS';
    });
  };
  const showData = (element: HTMLElement) => {
    Array.from(element.querySelectorAll('[data-show-after-load]')).map((el) => {
      // TODO: remove when better visibilty tracking is implemented
      el.removeAttribute('data-show-after-load');
      el.classList.remove('hidden');
    });
  };
  const SrcImagesToUpdate = 2;
  let toggleEasterEggCountHome = 0;
  let toggleEasterEggCountAway = 0;
  const updateTracker = (tracker: HTMLElement, nearestMatch: MatchType, audioElement: HTMLAudioElement, flags: Array<string> = []) => {

    const listenersForThisTracker = easterEggListerners[tracker.id];
    let imagesToLoadCount = 0;
    Array.from(tracker.querySelectorAll('[updates]')).map((el) => {
      if (el.getAttribute('updates') == 'away-team-image') {
        imagesToLoadCount++;
        if (nearestMatch.awayTeam.shortName == 'Man Utd') {
          if (!listenersForThisTracker.away) {
            listenersForThisTracker.away = () => {
              toggleEasterEgg(el, nearestMatch.awayTeam.crest, toggleEasterEggCountAway, audioElement);
              toggleEasterEggCountAway++;
            };
            el.addEventListener('click', listenersForThisTracker.away);
          }
        } else if (listenersForThisTracker.away) {
          el.removeEventListener('click', listenersForThisTracker.away);
          listenersForThisTracker.away = undefined;
        };
        if (!imageLoadListerners[tracker.id].away) {
          el.addEventListener('load', () => {
            console.log('imageLoaded', imagesToLoadCount);

            if (imagesToLoadCount == SrcImagesToUpdate || imagesToLoadCount == 0) {
              removeSpinner(tracker);
              showData(tracker);
              loading_status = LOADING_STATUSES.loaded;
              imagesToLoadCount = 0;
            }
          });
          imageLoadListerners[tracker.id].away = true;
        }
        el.src = nearestMatch.awayTeam.crest;
      } else if (el.getAttribute('updates') == 'home-team-image') {
        imagesToLoadCount++;
        if (nearestMatch.homeTeam.shortName == 'Man Utd') {
          if (!listenersForThisTracker.home) {
            listenersForThisTracker.home = () => {
              toggleEasterEgg(el, nearestMatch.homeTeam.crest, toggleEasterEggCountHome, audioElement);
              toggleEasterEggCountHome++;
            };
            el.addEventListener('click', listenersForThisTracker.home);
          }
        } else if (listenersForThisTracker.home) {
          el.removeEventListener('click', listenersForThisTracker.home);
          listenersForThisTracker.home = undefined;
        };
        if (!imageLoadListerners[tracker.id].home) {
          el.addEventListener('load', () => {
            console.log('imageLoaded', imagesToLoadCount);
            if (imagesToLoadCount == SrcImagesToUpdate || imagesToLoadCount == 0) {
              removeSpinner(tracker);
              showData(tracker);
              loading_status = LOADING_STATUSES.loaded;
              imagesToLoadCount = 0;
            }
          });
          imageLoadListerners[tracker.id].home = true;
        }
        el.src = nearestMatch.homeTeam.crest;
      } else if (el.getAttribute('updates') == 'away-team-name') {
        el.textContent = nearestMatch.awayTeam.shortName;
      } else if (el.getAttribute('updates') == 'home-team-name') {
        el.textContent = nearestMatch.homeTeam.shortName;
      } else if (el.getAttribute('updates') == 'match-date') {
        const converted = new Intl.DateTimeFormat(undefined, {
          weekday: 'long',
          month: 'long',
          day: 'numeric',
          hour: 'numeric',
          minute: 'numeric',
        }).format(new Date(nearestMatch.utcDate));

        el.textContent = converted;
      } else if (el.getAttribute('updates') == 'double-header' && flags.includes(DOUBLE_HEADER_FLAG)) {
        el.setAttribute('data-show-after-load', '');
      };
    });
  };

  const laterThanNow = (matches: Array<MatchType>, today: Date) => {
    const sortedMatches = matches.sort((a, b) => a.utcDate.localeCompare(b.utcDate));
    return sortedMatches.filter((match) => {
      return new Date(match.utcDate).getTime() > today.getTime();
    });
  };

  const otherMatchesOnSameDay = (matchToCompare: MatchType, matches: Array<MatchType>) => {
    const tzone = Intl.DateTimeFormat().resolvedOptions().timeZone
    const matchToCompareLocalizedDate = fromZonedTime(matchToCompare.utcDate, tzone);
    return matches.filter((match) => {
      const localizedDate = fromZonedTime(match.utcDate, tzone);
      return matchToCompare !== match && localizedDate.getDay() === matchToCompareLocalizedDate.getDay();
    });
  }
  const filterMatchResponse = async (existingMatches: Array<MatchType>, response: Response, today: Date) => {
    const json = await response.json();

    let doubleHeaderMatch: MatchType | undefined = undefined;
    const nearestMatches = laterThanNow([...existingMatches, ...json.matches], today);
    const nearestMatch = nearestMatches[0];
    if (nearestMatches.length > 1) {
      const otherMatches = otherMatchesOnSameDay(nearestMatch, nearestMatches);
      if (otherMatches.length > 0) {
        doubleHeaderMatch = otherMatches[0];
      }
    }
    return [nearestMatch, doubleHeaderMatch].filter(Boolean);
  };
  const hideDoubleHeaderItems = (matchTracker: HTMLElement, matchTrackerDoubleHeader: HTMLElement) => {
    const headerElement = matchTracker.querySelector('[updates="double-header"]')
    if (headerElement) {
      // TODO: this conflicts with data-show-after-load
      headerElement.classList.add('hidden');
    }
    matchTrackerDoubleHeader.classList.add('hidden');
  };
  const digCache = (midWeek: string, nextMidWeek: string, thirdMidWeek: string): [string, string] | [] => {
    let cache = localStorage.getItem(`${midWeek}-v${CACHE_VERSION}`);
    if (cache) {
      return [cache, midWeek];
    } else {
      cache = localStorage.getItem(`${nextMidWeek}-v${CACHE_VERSION}`);
      if (cache) {
        return [cache, nextMidWeek];
      } else {
        cache = localStorage.getItem(`${thirdMidWeek}-v${CACHE_VERSION}`);
        if (cache) {
          return [cache, thirdMidWeek];
        } else {
          return [];
        }
      }
    }
  };

  const checkForMatches = async (today: Date) => {
    const midWeek = format(startOfWeek(today, { weekStartsOn: 4 }), 'yyyy-MM-dd');
    const nextMidWeek = format(startOfWeek(addDays(today, 7), { weekStartsOn: 4 }), 'yyyy-MM-dd');
    const thirdMidWeek = format(startOfWeek(addDays(today, 14), { weekStartsOn: 4 }), 'yyyy-MM-dd');
    let checks = [midWeek];
    const matchTracker = document.getElementById('match-tracker');
    const matchTrackerDoubleHeader = document.getElementById('match-tracker-double-header');
    const audioPlayer = document.getElementById('audio-player');

    let [cache, foundWeekID] = digCache(midWeek, nextMidWeek, thirdMidWeek);
    if (cache) {
      try {
        const cacheParsed = JSON.parse(cache)
        if (cacheParsed?.matches && cacheParsed.matches.length > 0) {
          const matches = laterThanNow(cacheParsed.matches, today);
          let flags = [];
          if (matches.length > 1) {
            if (loading_status == LOADING_STATUSES.loaded) {
              return loading_status = LOADING_STATUSES.loaded;
            } else {
              flags.push(DOUBLE_HEADER_FLAG);
            }
          }
          if (matches.length > 0) {
            updateTracker(matchTracker, matches[0], audioPlayer, flags);
            if (matches.length > 1) {
              matchTrackerDoubleHeader.classList.remove('hidden');
              updateTracker(matchTrackerDoubleHeader, matches[1], audioPlayer);
            } else {
              hideDoubleHeaderItems(matchTracker, matchTrackerDoubleHeader);
            }
            return loading_status = LOADING_STATUSES.loaded;
          }
        }
      } catch (e) {
        console.log('error parsing cache, clearing', e);
        localStorage.removeItem(`${midWeek}-v${CACHE_VERSION}`);
      }
    }
    let nearestMatches: Array<MatchType> | [] = [];
    await fetch(`/api/manual-fixtures/${midWeek}.json`).then(async (response) => {
      if (response.status === 200) {
        const json = await response.json();
        nearestMatches = laterThanNow(json.matches, today);
      }
    });
    await fetch(`/api/fixtures/${midWeek}.json`).then(async (response) => {
      nearestMatches = await filterMatchResponse(nearestMatches, response, today);
      foundWeekID = midWeek;
    });
    if (!nearestMatches[0]) {
      checks.push(nextMidWeek);
      await fetch(`/api/manual-fixtures/${nextMidWeek}.json`).then(async (response) => {
        if (response.status === 200) {
          const json = await response.json();
          nearestMatches = laterThanNow(json.matches, today);
        }
      });
      await fetch(`/api/fixtures/${nextMidWeek}.json`).then(async (nextWeekResponse) => {
        nearestMatches = await filterMatchResponse(nearestMatches, nextWeekResponse, today);
        foundWeekID = nextMidWeek;
      });
    }
    if (!nearestMatches[0]) {
      checks.push(thirdMidWeek);
      await fetch(`/api/manual-fixtures/${thirdMidWeek}.json`).then(async (response) => {
        if (response.status === 200) {
          const json = await response.json();
          nearestMatches = laterThanNow(json.matches, today);
        }
      });
      await fetch(`/api/fixtures/${thirdMidWeek}.json`).then(async (thirdWeekResponse) => {
        nearestMatches = await filterMatchResponse(nearestMatches, thirdWeekResponse, today);
        foundWeekID = thirdMidWeek;
      });
    }

    if (nearestMatches[0]) {
      localStorage.setItem(`${foundWeekID}-v${CACHE_VERSION}`, JSON.stringify({
        matches: nearestMatches,
      }));
      let flags = [];
      if (nearestMatches.length > 1) {
        flags.push(DOUBLE_HEADER_FLAG);
      }
      updateTracker(matchTracker, nearestMatches[0], audioPlayer, flags);

      if (nearestMatches.length > 1) {
        matchTrackerDoubleHeader.classList.remove('hidden');
        updateTracker(matchTrackerDoubleHeader, nearestMatches[1], audioPlayer);
      } else {
        hideDoubleHeaderItems(matchTracker, matchTrackerDoubleHeader);
      }
      return loading_status = LOADING_STATUSES.loaded;
    } else {
      console.log('no match found in', checks);
    }
  };

  preloadEasterEggImage();
  document.addEventListener("astro:page-load", () => {
    setInterval(() => { checkForMatches(getToday()); }, 4000);
  });
  document.addEventListener("visibilitychange", () => {
    if (document.visibilityState === 'visible') {
      checkForMatches(getToday());
    }
  });
</script>
